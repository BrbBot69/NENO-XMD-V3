// plugins/reaction.js
const { lite } = require("../lite");

// Happy Reaction
lite({
    pattern: "happy",
    desc: "Dynamic happy emojis",
    category: "reaction",
    react: "üòÇ",
    filename: __filename
},
async (conn, mek, m, { from, reply }) => {
    try {
        const loadingMessage = await conn.sendMessage(from, { text: 'üòÇ' });
        const emojiMessages = ["üòÉ","üòÑ","üòÅ","üòä","üòé","ü•≥","üò∏","üòπ","üåû","üåà"];

        for (const emoji of emojiMessages) {
            await new Promise(r => setTimeout(r, 1000));
            await conn.relayMessage(from, {
                protocolMessage: {
                    key: loadingMessage.key,
                    type: 14,
                    editedMessage: { conversation: emoji }
                }
            }, {});
        }
    } catch (e) { reply(`‚ùå Error: ${e.message}`); }
});

// Heart Reaction
lite({
    pattern: "heart",
    desc: "Dynamic heart emojis",
    category: "reaction",
    react: "‚ù§Ô∏è",
    filename: __filename
},
async (conn, mek, m, { from, reply }) => {
    try {
        const loadingMessage = await conn.sendMessage(from, { text: 'üñ§' });
        const emojiMessages = ["üíñ","üíó","üíï","ü©∑","üíõ","üíö","ü©µ","üíô","üíú","üñ§","ü§ç","‚ù§Ô∏è"];

        for (const emoji of emojiMessages) {
            await new Promise(r => setTimeout(r, 1000));
            await conn.relayMessage(from, {
                protocolMessage: {
                    key: loadingMessage.key,
                    type: 14,
                    editedMessage: { conversation: emoji }
                }
            }, {});
        }
    } catch (e) { reply(`‚ùå Error: ${e.message}`); }
});

// Angry Reaction
lite({
    pattern: "angry",
    desc: "Dynamic angry emojis",
    category: "reaction",
    react: "üò°",
    filename: __filename
},
async (conn, mek, m, { from, reply }) => {
    try {
        const loadingMessage = await conn.sendMessage(from, { text: 'üò°' });
        const emojiMessages = ["üò°","üò†","ü§¨","üò§","üòæ"];

        for (const emoji of emojiMessages) {
            await new Promise(r => setTimeout(r, 1000));
            await conn.relayMessage(from, {
                protocolMessage: {
                    key: loadingMessage.key,
                    type: 14,
                    editedMessage: { conversation: emoji }
                }
            }, {});
        }
    } catch (e) { reply(`‚ùå Error: ${e.message}`); }
});

// Sad Reaction
lite({
    pattern: "sad",
    desc: "Dynamic sad emojis",
    category: "reaction",
    react: "üòî",
    filename: __filename
},
async (conn, mek, m, { from, reply }) => {
    try {
        const loadingMessage = await conn.sendMessage(from, { text: 'üòî' });
        const emojiMessages = ["ü•∫","üòü","üòï","üòñ","üò´","üôÅ","üò≠","üíî"];

        for (const emoji of emojiMessages) {
            await new Promise(r => setTimeout(r, 1000));
            await conn.relayMessage(from, {
                protocolMessage: {
                    key: loadingMessage.key,
                    type: 14,
                    editedMessage: { conversation: emoji }
                }
            }, {});
        }
    } catch (e) { reply(`‚ùå Error: ${e.message}`); }
});

// Shy Reaction
lite({
    pattern: "shy",
    desc: "Dynamic shy emojis",
    category: "reaction",
    react: "üò≥",
    filename: __filename
},
async (conn, mek, m, { from, reply }) => {
    try {
        const loadingMessage = await conn.sendMessage(from, { text: 'üò≥' });
        const emojiMessages = ["üò≥","üòä","üò∂","üôà","üôä"];

        for (const emoji of emojiMessages) {
            await new Promise(r => setTimeout(r, 1000));
            await conn.relayMessage(from, {
                protocolMessage: {
                    key: loadingMessage.key,
                    type: 14,
                    editedMessage: { conversation: emoji }
                }
            }, {});
        }
    } catch (e) { reply(`‚ùå Error: ${e.message}`); }
});

// Moon Reaction
lite({
    pattern: "moon",
    desc: "Dynamic moon emojis",
    category: "reaction",
    react: "üåö",
    filename: __filename
},
async (conn, mek, m, { from, reply }) => {
    try {
        const loadingMessage = await conn.sendMessage(from, { text: 'üåù' });
        const emojiMessages = ["üåó","üåò","üåë","üåí","üåì","üåî","üåï","üåñ"];

        for (const emoji of emojiMessages) {
            await new Promise(r => setTimeout(r, 1000));
            await conn.relayMessage(from, {
                protocolMessage: {
                    key: loadingMessage.key,
                    type: 14,
                    editedMessage: { conversation: emoji }
                }
            }, {});
        }
    } catch (e) { reply(`‚ùå Error: ${e.message}`); }
});

// Confused Reaction
lite({
    pattern: "confused",
    desc: "Dynamic confused emojis",
    category: "reaction",
    react: "ü§î",
    filename: __filename
},
async (conn, mek, m, { from, reply }) => {
    try {
        const loadingMessage = await conn.sendMessage(from, { text: 'ü§î' });
        const emojiMessages = ["üòï","üòµ","ü§î","üòñ","üò≤","ü§∑"];

        for (const emoji of emojiMessages) {
            await new Promise(r => setTimeout(r, 1000));
            await conn.relayMessage(from, {
                protocolMessage: {
                    key: loadingMessage.key,
                    type: 14,
                    editedMessage: { conversation: emoji }
                }
            }, {});
        }
    } catch (e) { reply(`‚ùå Error: ${e.message}`); }
});

// Hot Reaction
lite({
    pattern: "hot",
    desc: "Dynamic hot emojis",
    category: "reaction",
    react: "ü•µ",
    filename: __filename
},
async (conn, mek, m, { from, reply }) => {
    try {
        const loadingMessage = await conn.sendMessage(from, { text: 'ü•µ' });
        const emojiMessages = ["ü•µ","‚ù§Ô∏è","üíã","ü§§","üòã","üôä","üòª","üëÖ","üëÑ"];

        for (const emoji of emojiMessages) {
            await new Promise(r => setTimeout(r, 1000));
            await conn.relayMessage(from, {
                protocolMessage: {
                    key: loadingMessage.key,
                    type: 14,
                    editedMessage: { conversation: emoji }
                }
            }, {});
        }
    } catch (e) { reply(`‚ùå Error: ${e.message}`); }
});
